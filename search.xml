<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>箭头函数</title>
    <url>/2022/12/11/02-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<style>
    h3 
    {
    padding-bottom:5px;
    border-bottom: solid gray;
    }
</style>


<h3 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h3><h5>1.1 定义函数</h5>
定义箭头函在数语法上要比普通函数简洁得多，ES6中允许使用箭头=>来定义箭头函数，箭头函数省去了 function 关键字，函数的参数放在=>前面的括号中，函数体跟在=>后的花括号中。
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 箭头函数</span><br><span class="line">let fun = (name) =&gt; &#123;</span><br><span class="line">    return `Hello $&#123;name&#125; !`;</span><br><span class="line">&#125;;</span><br><span class="line">// 普通函数</span><br><span class="line">let fun = function (name) &#123;</span><br><span class="line">    return `Hello $&#123;name&#125; !`;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5> 1.2 箭头函数的参数</h5>
① 如果箭头函数没有参数，直接写一个空括号即可。   

<p>② 如果箭头函数的参数只有一个，也可以省去包裹参数的括号。<br>③ 如果箭头函数有多个参数，将参数依次用逗号( ，)分隔，包裹在括号中即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 没有参数</span><br><span class="line">let fun1 = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;dingFY&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 只有一个参数，可以省去参数括号</span><br><span class="line">let fun2 = name =&gt; &#123;</span><br><span class="line">    console.log(`Hello $&#123;name&#125; !`)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 有多个参数，逗号分隔</span><br><span class="line">let fun3 = (val1, val2, val3) =&gt; &#123;</span><br><span class="line">    return [val1, val2, val3];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5> 1.3 箭头函数的函数体</h5>
① 如果箭头函数的函数体只有一句代码，就是简单返回某个变量或者返回一个简单的JS表达式，可以省去函数体的大括号

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let fun = val =&gt; val;</span><br><span class="line">// 等同于</span><br><span class="line">let fun = function (val) &#123; return val &#125;;</span><br><span class="line"></span><br><span class="line">let sum = (num1, num2) =&gt; num1 + num2;</span><br><span class="line">// 等同于</span><br><span class="line">let sum = function(num1, num2) &#123;</span><br><span class="line">  return num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>② 如果箭头函数的函数体只有一句代码，就是返回一个对象，可以像下面这样写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 用小括号包裹要返回的对象，不报错</span><br><span class="line">let getTempItem = id =&gt; (&#123; id: id, name: &quot;Temp&quot; &#125;);</span><br><span class="line"></span><br><span class="line">// 但绝不能这样写，会报错，因为对象的大括号会被解释为函数体的大括号</span><br><span class="line">let getTempItem = id =&gt; &#123; id: id, name: &quot;Temp&quot; &#125;;</span><br></pre></td></tr></table></figure>
<p>③ 如果箭头函数的函数体只有一条语句并且不需要返回值（最常见是调用一个函数），可以给这条语句前面加一个void关键字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let fun = () =&gt; void doesNotReturn();</span><br></pre></td></tr></table></figure>
<h3 id="二、箭头函数与普通函数的区别"><a href="#二、箭头函数与普通函数的区别" class="headerlink" title="二、箭头函数与普通函数的区别"></a>二、箭头函数与普通函数的区别</h3><h5>2.1  箭头函数没有 prototype (原型)，所以箭头函数本身没有this​​​​​​​ </h5>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 箭头函数</span><br><span class="line">let a = () =&gt; &#123;&#125;;</span><br><span class="line">console.log(a.prototype); // undefined</span><br><span class="line"></span><br><span class="line">// 普通函数</span><br><span class="line">function a() &#123;&#125;;</span><br><span class="line">console.log(a.prototype); // &#123;constructor:f&#125;</span><br></pre></td></tr></table></figure>
<h5>2.2 箭头函数不会创建自己的this</h5>
箭头函数没有自己的this，箭头函数的this在指向定义<strong>(注意：是定义时，不是调用时)</strong>的时候继承自外层第一个普通函数的this。所以，箭头函数中 this 的指向在它被定义的时候就已经确定了，之后永远不会改变。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">  a: 10,</span><br><span class="line">  b: () =&gt; &#123;</span><br><span class="line">    console.log(this.a); // undefined</span><br><span class="line">    console.log(this); // Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  c: function() &#123;</span><br><span class="line">    console.log(this.a); // 10</span><br><span class="line">    console.log(this); // &#123;a: 10, b: ƒ, c: ƒ&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.b(); </span><br><span class="line">obj.c();</span><br></pre></td></tr></table></figure>
<h5>2.3 call | apply | bind 无法改变箭头函数中this的指向</h5>
call | apply | bind方法可以用来动态修改函数执行时this的指向，但由于<strong>箭头函数的this定义时就已经确定且永远不会改变</strong>。所以使用这些方法永远也改变不了箭头函数this的指向。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var id = 10;</span><br><span class="line">let fun = () =&gt; &#123;</span><br><span class="line">    console.log(this.id)</span><br><span class="line">&#125;;</span><br><span class="line">fun();     // 10</span><br><span class="line">fun.call(&#123; id: 20 &#125;);     // 10</span><br><span class="line">fun.apply(&#123; id: 20 &#125;);    // 10</span><br><span class="line">fun.bind(&#123; id: 20 &#125;)();   // 10</span><br></pre></td></tr></table></figure>
<h5>2.4 箭头函数不能作为构造函数使用</h5>
构造函数的new都做了些什么？分为四步：

<p> ① JS内部首先会先生成一个对象；<br>  ② 再把函数中的this指向该对象；<br>  ③ 然后执行构造函数中的语句；<br>  ④ 最终返回该对象实例。</p>
<p>  但是！！因为箭头函数没有自己的this，它的<strong>this其实是继承了外层执行环境中的this</strong>，且this指向永远不会随在哪里调用、被谁调用而改变，所以箭头函数不能作为构造函数使用，或者说构造函数不能定义成箭头函数，否则用new调用时会报错！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let Fun = (name, age) =&gt; &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 报错</span><br><span class="line">let p = new Fun(&#x27;dingFY&#x27;, 24);</span><br></pre></td></tr></table></figure>
<h5>2.5 箭头函数不绑定arguments，取而代之用rest参数...代替arguments对象，来访问箭头函数的参数列表</h5>

<p>箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是外层局部（函数）执行环境中的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 普通函数</span><br><span class="line">function A(a)&#123;</span><br><span class="line">  console.log(arguments);</span><br><span class="line">&#125;</span><br><span class="line">A(1,2,3,4,5,8);  //  [1, 2, 3, 4, 5, 8, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br><span class="line"></span><br><span class="line">// 箭头函数</span><br><span class="line">let B = (b)=&gt;&#123;</span><br><span class="line">  console.log(arguments);</span><br><span class="line">&#125;</span><br><span class="line">B(2,92,32,32);   // Uncaught ReferenceError: arguments is not defined</span><br><span class="line"></span><br><span class="line">// rest参数...</span><br><span class="line">let C = (...c) =&gt; &#123;</span><br><span class="line">  console.log(c);</span><br><span class="line">&#125;</span><br><span class="line">C(3,82,32,11323);  // [3, 82, 32, 11323]</span><br></pre></td></tr></table></figure>
<h5>2.6 箭头函数不能用作Generator函数，不能使用yield关键字</h5>]]></content>
      <categories>
        <category>前端</category>
        <category>面试问题</category>
      </categories>
      <tags>
        <tag>箭头函数</tag>
      </tags>
  </entry>
  <entry>
    <title>Let Var Const的区别</title>
    <url>/2022/12/11/01-let%20const%20%20var%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h4 id="1-var变量提升机制"><a href="#1-var变量提升机制" class="headerlink" title="1.var变量提升机制"></a>1.var变量提升机制</h4><p><strong>变量提升</strong>：在全局作用域或是在块级作用域中，使用var关键字声明的变量，都会被提升到该作用于的顶部</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function person(status) &#123;</span><br><span class="line">    if (status) &#123;</span><br><span class="line">        var value = &quot;abc&quot; </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(value) // undefined</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(value) // undefined</span><br><span class="line">&#125;</span><br><span class="line">person(false)</span><br></pre></td></tr></table></figure>
<p>在上面的例子中，if不会构成块级作用域，if代码块中的var声明的变量被提升到了函数顶端，因为js引擎在代码预编译时会自动将所有代码里面的var关键字声明的语句提升到当前作用域的最顶端，因此上面的代码就相当于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function person(status) &#123;</span><br><span class="line">    var value; //变量声明提升</span><br><span class="line">    if (status) &#123;</span><br><span class="line">        value = &quot;abc&quot; </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(value) // undefined</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(value) // undefined</span><br><span class="line">&#125;</span><br><span class="line">person(false)</span><br></pre></td></tr></table></figure>

<h4 id="2-let声明"><a href="#2-let声明" class="headerlink" title="2.let声明"></a>2.let声明</h4><p>使用let声明的变量没有var那样的变量提升，let声明的变量只在当前作用域中有效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function person(status) &#123;</span><br><span class="line">    if (status) &#123;</span><br><span class="line">        let value = &quot;abc&quot; </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(value) // 报错</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(value) // 报错</span><br><span class="line">&#125;</span><br><span class="line">person(false)</span><br></pre></td></tr></table></figure>
<p>let是块级作用域，所有外面的语句块访问不到，<strong>let没有变量提升</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(value) // 报错</span><br><span class="line">let value = &quot;abc&quot;</span><br></pre></td></tr></table></figure>
<h4 id="禁止重复声明"><a href="#禁止重复声明" class="headerlink" title="禁止重复声明"></a>禁止重复声明</h4><p>如果<strong>同一个作用域中</strong>变量的声明已经存在，再次使用let关键字声明会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var value = &quot;abc&quot;</span><br><span class="line">let value = &quot;abc&quot; // 报错</span><br><span class="line"></span><br><span class="line">// 再来看一下不同作用域的情况</span><br><span class="line"></span><br><span class="line">var value = &quot;abc&quot; // 全局作用域</span><br><span class="line">if(true) &#123;</span><br><span class="line">	let value = &quot;abc&quot; // 代码块中声明，毫无影响</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只有在相同作用域中重复声明 变量才会报错</p>
<h4 id="3-const声明"><a href="#3-const声明" class="headerlink" title="3.const声明"></a>3.const声明</h4><p>const 声明指的是常量，常量一旦定义完不能修改，常量定义必须初始化值，否则就会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const value = &quot;abc&quot;</span><br><span class="line">const age; // 报错 常量未初始化</span><br></pre></td></tr></table></figure>
<h4 id="4-const与let"><a href="#4-const与let" class="headerlink" title="4.const与let"></a>4.const与let</h4><p>const与let都是块级作用域，const常量只在<strong>当前代码块内</strong>有效，也不能在当前作用域中重复定义相同的变量，不存在变量提升</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (true) &#123;</span><br><span class="line">    const name = &quot;abc&quot;</span><br><span class="line">&#125;</span><br><span class="line">console.log(name) // 报错 访问不到内部变量</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(value) // 报错 const声明的变量也不存在变量提升</span><br><span class="line">const value = &quot;abc&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let value = &quot;abc&quot;</span><br><span class="line">const value = &quot;abc&quot; // 报错 重复声明</span><br></pre></td></tr></table></figure>
<h4 id="5-cosnt声明对象"><a href="#5-cosnt声明对象" class="headerlink" title="5.cosnt声明对象"></a>5.cosnt声明对象</h4><p>虽然const变量<strong>不能修改指针</strong>，但是可以<strong>修改值</strong>。比如定义一个对象，可以修改对象理的属性值，但是不可以重写整个对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const person = &#123;</span><br><span class="line">    name: &quot;abc&quot;,</span><br><span class="line">    age: 23</span><br><span class="line">&#125;</span><br><span class="line">person.age = 18 // 没问题</span><br><span class="line">person = &#123;&#125; // 报错 不能修改对象指针</span><br></pre></td></tr></table></figure>
<h4 id="6-暂时死区"><a href="#6-暂时死区" class="headerlink" title="6.暂时死区"></a>6.暂时死区</h4><p>跟var相比，let和const定义变量不会被提升到作用域顶端，即便是相对安全的typeof也会出现错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(typeof value)</span><br><span class="line">let value = &quot;abc&quot;</span><br></pre></td></tr></table></figure>
<p>console.log(typeof value)会抛出错误是因为用let定义并初始化变量语句是不会执行的。此时的value还是处于在JS所谓的<strong>暂时死区（temporal dead zone）</strong>，虽然JavaScript没有明确标准TDZ，但是人们常用它描述let和const定义的变量不会提升。</p>
<p>TDZ工作原理：JS引擎在扫代码时发现变量声明时，如果遇到var会将他们提升到作用域的顶端，如果遇到const或let就会将声明放到TDZ中，如果访问TDZ中的变量就会抛出错误，只有执行完TDZ中的变量才会将它移出，然后就可以正常访问。这机制只会在当前作用域生效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(typeof value)  // &quot;undefined&quot;</span><br><span class="line">if (true) &#123;</span><br><span class="line">    let value = &quot;abc&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果变量是let和const声明的就会被放到TDZ中，前提是只会针对当前作用域内有效。所以上面代码中console.log(typeof value)不会抛出错误，let声明只会在当前的语句中有效。</p>
<p><strong>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。</strong></p>
<h4 id="7-var-let-const最大的区别"><a href="#7-var-let-const最大的区别" class="headerlink" title="7. var let const最大的区别"></a>7. var let const最大的区别</h4><p>var在全局作用域声明的变量有一种行为会挂载在window对象上，它会创建一个新的全局变量作为全局对象的属性，这种行为说不定会覆盖到window对象上的某个属性，而<strong>let const</strong>声明的变量则不会有这种行为。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var value1 = &quot;张三&quot;</span><br><span class="line">let value2 = &quot;李四&quot;</span><br><span class="line">const value3 = &quot;王五&quot;</span><br><span class="line">console.log(window.value1) // 张三</span><br><span class="line">console.log(window.value2) // undefined</span><br><span class="line">console.log(window.value3) // undefined</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>面试问题</category>
      </categories>
      <tags>
        <tag>Let Var Const的区别</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2022/12/11/03-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<ul>
<li>确定分界点：q[l],q[l+r &gt;&gt; 1],q[r]</li>
<li>调整区间 (&lt;&#x3D;x | &gt;&#x3D;x)</li>
<li>递归处理<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void quick_sort(int q[], int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    if (l &lt; r)</span><br><span class="line">        return;</span><br><span class="line">    int x = q[l + r &gt;&gt; 2], i = l - 1, j = r + 1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    while (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        do</span><br><span class="line">            ++i;</span><br><span class="line">        while (q[i] &lt; x);</span><br><span class="line">        do</span><br><span class="line">            ++j;</span><br><span class="line">        while (q[i] &gt; x);</span><br><span class="line">        if (i &lt; j)</span><br><span class="line">            swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(q, l, j);</span><br><span class="line">    quick_sort(q, j + 1, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
        <category>排序</category>
        <category>快速排序</category>
      </categories>
      <tags>
        <tag>快速排序</tag>
      </tags>
  </entry>
</search>
