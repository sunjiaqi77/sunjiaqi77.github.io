<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>箭头函数</title>
    <url>/2022/12/11/02-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<style>
    h3 
    {
    padding-bottom:5px;
    border-bottom: solid gray;
    }
</style>


<h3 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h3><h5>1.1 定义函数</h5>
定义箭头函在数语法上要比普通函数简洁得多，ES6中允许使用箭头=>来定义箭头函数，箭头函数省去了 function 关键字，函数的参数放在=>前面的括号中，函数体跟在=>后的花括号中。
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 箭头函数</span><br><span class="line">let fun = (name) =&gt; &#123;</span><br><span class="line">    return `Hello $&#123;name&#125; !`;</span><br><span class="line">&#125;;</span><br><span class="line">// 普通函数</span><br><span class="line">let fun = function (name) &#123;</span><br><span class="line">    return `Hello $&#123;name&#125; !`;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5> 1.2 箭头函数的参数</h5>
① 如果箭头函数没有参数，直接写一个空括号即可。   

<p>② 如果箭头函数的参数只有一个，也可以省去包裹参数的括号。<br>③ 如果箭头函数有多个参数，将参数依次用逗号( ，)分隔，包裹在括号中即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 没有参数</span><br><span class="line">let fun1 = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;dingFY&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 只有一个参数，可以省去参数括号</span><br><span class="line">let fun2 = name =&gt; &#123;</span><br><span class="line">    console.log(`Hello $&#123;name&#125; !`)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 有多个参数，逗号分隔</span><br><span class="line">let fun3 = (val1, val2, val3) =&gt; &#123;</span><br><span class="line">    return [val1, val2, val3];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5> 1.3 箭头函数的函数体</h5>
① 如果箭头函数的函数体只有一句代码，就是简单返回某个变量或者返回一个简单的JS表达式，可以省去函数体的大括号

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let fun = val =&gt; val;</span><br><span class="line">// 等同于</span><br><span class="line">let fun = function (val) &#123; return val &#125;;</span><br><span class="line"></span><br><span class="line">let sum = (num1, num2) =&gt; num1 + num2;</span><br><span class="line">// 等同于</span><br><span class="line">let sum = function(num1, num2) &#123;</span><br><span class="line">  return num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>② 如果箭头函数的函数体只有一句代码，就是返回一个对象，可以像下面这样写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 用小括号包裹要返回的对象，不报错</span><br><span class="line">let getTempItem = id =&gt; (&#123; id: id, name: &quot;Temp&quot; &#125;);</span><br><span class="line"></span><br><span class="line">// 但绝不能这样写，会报错，因为对象的大括号会被解释为函数体的大括号</span><br><span class="line">let getTempItem = id =&gt; &#123; id: id, name: &quot;Temp&quot; &#125;;</span><br></pre></td></tr></table></figure>
<p>③ 如果箭头函数的函数体只有一条语句并且不需要返回值（最常见是调用一个函数），可以给这条语句前面加一个void关键字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let fun = () =&gt; void doesNotReturn();</span><br></pre></td></tr></table></figure>
<h3 id="二、箭头函数与普通函数的区别"><a href="#二、箭头函数与普通函数的区别" class="headerlink" title="二、箭头函数与普通函数的区别"></a>二、箭头函数与普通函数的区别</h3><h5>2.1  箭头函数没有 prototype (原型)，所以箭头函数本身没有this​​​​​​​ </h5>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 箭头函数</span><br><span class="line">let a = () =&gt; &#123;&#125;;</span><br><span class="line">console.log(a.prototype); // undefined</span><br><span class="line"></span><br><span class="line">// 普通函数</span><br><span class="line">function a() &#123;&#125;;</span><br><span class="line">console.log(a.prototype); // &#123;constructor:f&#125;</span><br></pre></td></tr></table></figure>
<h5>2.2 箭头函数不会创建自己的this</h5>
箭头函数没有自己的this，箭头函数的this在指向定义<strong>(注意：是定义时，不是调用时)</strong>的时候继承自外层第一个普通函数的this。所以，箭头函数中 this 的指向在它被定义的时候就已经确定了，之后永远不会改变。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">  a: 10,</span><br><span class="line">  b: () =&gt; &#123;</span><br><span class="line">    console.log(this.a); // undefined</span><br><span class="line">    console.log(this); // Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  c: function() &#123;</span><br><span class="line">    console.log(this.a); // 10</span><br><span class="line">    console.log(this); // &#123;a: 10, b: ƒ, c: ƒ&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.b(); </span><br><span class="line">obj.c();</span><br></pre></td></tr></table></figure>
<h5>2.3 call | apply | bind 无法改变箭头函数中this的指向</h5>
call | apply | bind方法可以用来动态修改函数执行时this的指向，但由于<strong>箭头函数的this定义时就已经确定且永远不会改变</strong>。所以使用这些方法永远也改变不了箭头函数this的指向。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var id = 10;</span><br><span class="line">let fun = () =&gt; &#123;</span><br><span class="line">    console.log(this.id)</span><br><span class="line">&#125;;</span><br><span class="line">fun();     // 10</span><br><span class="line">fun.call(&#123; id: 20 &#125;);     // 10</span><br><span class="line">fun.apply(&#123; id: 20 &#125;);    // 10</span><br><span class="line">fun.bind(&#123; id: 20 &#125;)();   // 10</span><br></pre></td></tr></table></figure>
<h5>2.4 箭头函数不能作为构造函数使用</h5>
构造函数的new都做了些什么？分为四步：

<p> ① JS内部首先会先生成一个对象；<br>  ② 再把函数中的this指向该对象；<br>  ③ 然后执行构造函数中的语句；<br>  ④ 最终返回该对象实例。</p>
<p>  但是！！因为箭头函数没有自己的this，它的<strong>this其实是继承了外层执行环境中的this</strong>，且this指向永远不会随在哪里调用、被谁调用而改变，所以箭头函数不能作为构造函数使用，或者说构造函数不能定义成箭头函数，否则用new调用时会报错！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let Fun = (name, age) =&gt; &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 报错</span><br><span class="line">let p = new Fun(&#x27;dingFY&#x27;, 24);</span><br></pre></td></tr></table></figure>
<h5>2.5 箭头函数不绑定arguments，取而代之用rest参数...代替arguments对象，来访问箭头函数的参数列表</h5>

<p>箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是外层局部（函数）执行环境中的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 普通函数</span><br><span class="line">function A(a)&#123;</span><br><span class="line">  console.log(arguments);</span><br><span class="line">&#125;</span><br><span class="line">A(1,2,3,4,5,8);  //  [1, 2, 3, 4, 5, 8, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br><span class="line"></span><br><span class="line">// 箭头函数</span><br><span class="line">let B = (b)=&gt;&#123;</span><br><span class="line">  console.log(arguments);</span><br><span class="line">&#125;</span><br><span class="line">B(2,92,32,32);   // Uncaught ReferenceError: arguments is not defined</span><br><span class="line"></span><br><span class="line">// rest参数...</span><br><span class="line">let C = (...c) =&gt; &#123;</span><br><span class="line">  console.log(c);</span><br><span class="line">&#125;</span><br><span class="line">C(3,82,32,11323);  // [3, 82, 32, 11323]</span><br></pre></td></tr></table></figure>
<h5>2.6 箭头函数不能用作Generator函数，不能使用yield关键字</h5>]]></content>
      <categories>
        <category>前端</category>
        <category>面试问题</category>
      </categories>
      <tags>
        <tag>箭头函数</tag>
      </tags>
  </entry>
  <entry>
    <title>Let Var Const的区别</title>
    <url>/2022/12/11/01-let%20const%20%20var%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h4 id="1-var变量提升机制"><a href="#1-var变量提升机制" class="headerlink" title="1.var变量提升机制"></a>1.var变量提升机制</h4><p><strong>变量提升</strong>：在全局作用域或是在块级作用域中，使用var关键字声明的变量，都会被提升到该作用于的顶部</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function person(status) &#123;</span><br><span class="line">    if (status) &#123;</span><br><span class="line">        var value = &quot;abc&quot; </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(value) // undefined</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(value) // undefined</span><br><span class="line">&#125;</span><br><span class="line">person(false)</span><br></pre></td></tr></table></figure>
<p>在上面的例子中，if不会构成块级作用域，if代码块中的var声明的变量被提升到了函数顶端，因为js引擎在代码预编译时会自动将所有代码里面的var关键字声明的语句提升到当前作用域的最顶端，因此上面的代码就相当于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function person(status) &#123;</span><br><span class="line">    var value; //变量声明提升</span><br><span class="line">    if (status) &#123;</span><br><span class="line">        value = &quot;abc&quot; </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(value) // undefined</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(value) // undefined</span><br><span class="line">&#125;</span><br><span class="line">person(false)</span><br></pre></td></tr></table></figure>

<h4 id="2-let声明"><a href="#2-let声明" class="headerlink" title="2.let声明"></a>2.let声明</h4><p>使用let声明的变量没有var那样的变量提升，let声明的变量只在当前作用域中有效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function person(status) &#123;</span><br><span class="line">    if (status) &#123;</span><br><span class="line">        let value = &quot;abc&quot; </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(value) // 报错</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(value) // 报错</span><br><span class="line">&#125;</span><br><span class="line">person(false)</span><br></pre></td></tr></table></figure>
<p>let是块级作用域，所有外面的语句块访问不到，<strong>let没有变量提升</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(value) // 报错</span><br><span class="line">let value = &quot;abc&quot;</span><br></pre></td></tr></table></figure>
<h4 id="禁止重复声明"><a href="#禁止重复声明" class="headerlink" title="禁止重复声明"></a>禁止重复声明</h4><p>如果<strong>同一个作用域中</strong>变量的声明已经存在，再次使用let关键字声明会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var value = &quot;abc&quot;</span><br><span class="line">let value = &quot;abc&quot; // 报错</span><br><span class="line"></span><br><span class="line">// 再来看一下不同作用域的情况</span><br><span class="line"></span><br><span class="line">var value = &quot;abc&quot; // 全局作用域</span><br><span class="line">if(true) &#123;</span><br><span class="line">	let value = &quot;abc&quot; // 代码块中声明，毫无影响</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只有在相同作用域中重复声明 变量才会报错</p>
<h4 id="3-const声明"><a href="#3-const声明" class="headerlink" title="3.const声明"></a>3.const声明</h4><p>const 声明指的是常量，常量一旦定义完不能修改，常量定义必须初始化值，否则就会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const value = &quot;abc&quot;</span><br><span class="line">const age; // 报错 常量未初始化</span><br></pre></td></tr></table></figure>
<h4 id="4-const与let"><a href="#4-const与let" class="headerlink" title="4.const与let"></a>4.const与let</h4><p>const与let都是块级作用域，const常量只在<strong>当前代码块内</strong>有效，也不能在当前作用域中重复定义相同的变量，不存在变量提升</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (true) &#123;</span><br><span class="line">    const name = &quot;abc&quot;</span><br><span class="line">&#125;</span><br><span class="line">console.log(name) // 报错 访问不到内部变量</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(value) // 报错 const声明的变量也不存在变量提升</span><br><span class="line">const value = &quot;abc&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let value = &quot;abc&quot;</span><br><span class="line">const value = &quot;abc&quot; // 报错 重复声明</span><br></pre></td></tr></table></figure>
<h4 id="5-cosnt声明对象"><a href="#5-cosnt声明对象" class="headerlink" title="5.cosnt声明对象"></a>5.cosnt声明对象</h4><p>虽然const变量<strong>不能修改指针</strong>，但是可以<strong>修改值</strong>。比如定义一个对象，可以修改对象理的属性值，但是不可以重写整个对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const person = &#123;</span><br><span class="line">    name: &quot;abc&quot;,</span><br><span class="line">    age: 23</span><br><span class="line">&#125;</span><br><span class="line">person.age = 18 // 没问题</span><br><span class="line">person = &#123;&#125; // 报错 不能修改对象指针</span><br></pre></td></tr></table></figure>
<h4 id="6-暂时死区"><a href="#6-暂时死区" class="headerlink" title="6.暂时死区"></a>6.暂时死区</h4><p>跟var相比，let和const定义变量不会被提升到作用域顶端，即便是相对安全的typeof也会出现错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(typeof value)</span><br><span class="line">let value = &quot;abc&quot;</span><br></pre></td></tr></table></figure>
<p>console.log(typeof value)会抛出错误是因为用let定义并初始化变量语句是不会执行的。此时的value还是处于在JS所谓的<strong>暂时死区（temporal dead zone）</strong>，虽然JavaScript没有明确标准TDZ，但是人们常用它描述let和const定义的变量不会提升。</p>
<p>TDZ工作原理：JS引擎在扫代码时发现变量声明时，如果遇到var会将他们提升到作用域的顶端，如果遇到const或let就会将声明放到TDZ中，如果访问TDZ中的变量就会抛出错误，只有执行完TDZ中的变量才会将它移出，然后就可以正常访问。这机制只会在当前作用域生效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(typeof value)  // &quot;undefined&quot;</span><br><span class="line">if (true) &#123;</span><br><span class="line">    let value = &quot;abc&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果变量是let和const声明的就会被放到TDZ中，前提是只会针对当前作用域内有效。所以上面代码中console.log(typeof value)不会抛出错误，let声明只会在当前的语句中有效。</p>
<p><strong>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。</strong></p>
<h4 id="7-var-let-const最大的区别"><a href="#7-var-let-const最大的区别" class="headerlink" title="7. var let const最大的区别"></a>7. var let const最大的区别</h4><p>var在全局作用域声明的变量有一种行为会挂载在window对象上，它会创建一个新的全局变量作为全局对象的属性，这种行为说不定会覆盖到window对象上的某个属性，而<strong>let const</strong>声明的变量则不会有这种行为。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var value1 = &quot;张三&quot;</span><br><span class="line">let value2 = &quot;李四&quot;</span><br><span class="line">const value3 = &quot;王五&quot;</span><br><span class="line">console.log(window.value1) // 张三</span><br><span class="line">console.log(window.value2) // undefined</span><br><span class="line">console.log(window.value3) // undefined</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>面试问题</category>
      </categories>
      <tags>
        <tag>Let Var Const的区别</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2022/12/11/03-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<ul>
<li>确定分界点：q[l],q[l+r &gt;&gt; 1],q[r]</li>
<li>调整区间 (&lt;&#x3D;x | &gt;&#x3D;x)</li>
<li>递归处理<span id="more"></span></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void quick_sort(int q[], int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    if (l &lt; r)</span><br><span class="line">        return;</span><br><span class="line">    int x = q[l + r &gt;&gt; 2], i = l - 1, j = r + 1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    while (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        do</span><br><span class="line">            ++i;</span><br><span class="line">        while (q[i] &lt; x);</span><br><span class="line">        do</span><br><span class="line">            ++j;</span><br><span class="line">        while (q[i] &gt; x);</span><br><span class="line">        if (i &lt; j)</span><br><span class="line">            swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(q, l, j);</span><br><span class="line">    quick_sort(q, j + 1, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>排序</category>
        <category>快速排序</category>
      </categories>
      <tags>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2022/12/11/04-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<ul>
<li>[L,R]&#x3D;&#x3D;&gt;[L,mid],[mid+1,R]</li>
<li>递归排序[L,mid]和[mid+1,R]</li>
<li>归并，将左右两个序列合并成一个有序序列<span id="more"></span></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void merge_sort(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    if (l &lt;= r)</span><br><span class="line">        return;</span><br><span class="line">    int mid = l + r &gt;&gt; 1;</span><br><span class="line">    merge_sort(l, mid), merge_sort(mid + 1, r);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    int i = l, j = mid + 1, k = 0;</span><br><span class="line">    while (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        if (q[i] &lt;= q[j])</span><br><span class="line">            temp[k++] = q[i++];</span><br><span class="line">        else</span><br><span class="line">            temp[k++] = q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    while (i &lt;= mid)</span><br><span class="line">        temp[k++] = q[i++];</span><br><span class="line">    while (j &lt;= r)</span><br><span class="line">        temp[k++] = q[j++];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for (int i = l, j = 0; i &lt;= r; i++, j++)</span><br><span class="line">        q[i] = temp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>排序</category>
        <category>归并排序</category>
      </categories>
      <tags>
        <tag>归并排序</tag>
      </tags>
  </entry>
  <entry>
    <title>整数二分</title>
    <url>/2022/12/11/05-%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool check(int x) &#123;/* ... */&#125; // 检查x是否满足某种性质</span><br><span class="line"></span><br><span class="line">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span><br><span class="line">int bsearch_1(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        //左边区间的右端点</span><br><span class="line">        int mid = l + r &gt;&gt; 1;</span><br><span class="line">        if (check(mid)) r = mid;    // check()判断mid是否满足性质</span><br><span class="line">        else l = mid + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br><span class="line">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span><br><span class="line">int bsearch_2(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">           //右边区间的左端点 记住是l+r+1 不然遇到特殊值会死循环</span><br><span class="line">        int mid = l + r + 1 &gt;&gt; 1;</span><br><span class="line">        if (check(mid)) l = mid;</span><br><span class="line">        else r = mid - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>二分</category>
        <category>整数二分</category>
      </categories>
      <tags>
        <tag>整数二分</tag>
      </tags>
  </entry>
  <entry>
    <title>浮点数二分</title>
    <url>/2022/12/11/06-%E6%B5%AE%E7%82%B9%E6%95%B0%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool check(double x) &#123;/* ... */&#125; // 检查x是否满足某种性质</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">double bsearch_3(double l, double r)</span><br><span class="line">&#123;</span><br><span class="line">    const double eps = 1e-6;   // eps 表示精度，取决于题目对精度的要求</span><br><span class="line">    while (r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        double mid = (l + r) / 2;</span><br><span class="line">        if (check(mid)) r = mid;</span><br><span class="line">        else l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>二分</category>
        <category>浮点数二分</category>
      </categories>
      <tags>
        <tag>浮点数二分</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度加法</title>
    <url>/2022/12/11/07-%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%8A%A0%E6%B3%95/</url>
    <content><![CDATA[<!--more>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// C = A + B, A &gt;= 0, B &gt;= 0</span><br><span class="line">vector&lt;int&gt; add(vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; C;</span><br><span class="line">    </span><br><span class="line">    int t=0; //进位标志</span><br><span class="line">    for(int i=0;i&lt;A.size()||i&lt;B.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(i&lt;A.size()) t+=A[i];</span><br><span class="line">        if(i&lt;B.size()) t+=B[i];</span><br><span class="line">        </span><br><span class="line">        C.push_back(t%10);</span><br><span class="line">        t/=10;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if(t) C.push_back(1); //最高位进位</span><br><span class="line">    </span><br><span class="line">    return C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>高精度</category>
        <category>高精度加法</category>
      </categories>
      <tags>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度乘低精度</title>
    <url>/2022/12/11/09-%E9%AB%98%E7%B2%BE%E5%BA%A6%E4%B9%98%E6%B3%95/</url>
    <content><![CDATA[<p>去前导0</p>
<!--more>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// C = A * b, A &gt;= 0, b &gt;= 0</span><br><span class="line">vector&lt;int&gt; mul(vector&lt;int&gt; &amp;A, int b)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; C;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    int t = 0;</span><br><span class="line">    //循环结束条件为进位结束或A的每一位都完成</span><br><span class="line">    for (int i = 0; i &lt; A.size() || t; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        if (i &lt; A.size()) t += A[i] * b;</span><br><span class="line">        C.push_back(t % 10);</span><br><span class="line">        t /= 10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>高精度</category>
        <category>高精度乘法</category>
      </categories>
      <tags>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度减法</title>
    <url>/2022/12/11/08-%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%87%8F%E6%B3%95/</url>
    <content><![CDATA[<p>比较A,B大小，进行交换（去前导0）</p>
<!--more>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool cmp(vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B)</span><br><span class="line">&#123;</span><br><span class="line">    if(A.size()!=B.size())</span><br><span class="line">        return A.size()&gt;B.size();</span><br><span class="line">    for(int i=A.size()-1;i&gt;=0;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        if(A[i]!=B[i])</span><br><span class="line">            return  A[i]&gt;B[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span><br><span class="line">vector&lt;int&gt; sub(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; C;</span><br><span class="line">    for (int i = 0, t = 0; i &lt; A.size(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        if (i &lt; B.size()) t -= B[i];</span><br><span class="line">        C.push_back((t + 10) % 10);</span><br><span class="line">        if (t &lt; 0) t = 1;</span><br><span class="line">        else t = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();</span><br><span class="line">    return C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>高精度</category>
        <category>高精度减法</category>
      </categories>
      <tags>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度除以低精度</title>
    <url>/2022/12/11/10-%E9%AB%98%E7%B2%BE%E5%BA%A6%E9%99%A4%E6%B3%95/</url>
    <content><![CDATA[<p>去前导0</p>
<!--more>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// A / b = C ... r, A &gt;= 0, b &gt; 0</span><br><span class="line">vector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r)</span><br><span class="line">&#123;    </span><br><span class="line">    vector&lt;int&gt; C;    </span><br><span class="line">    r = 0;        </span><br><span class="line">    //逆序再逆序    </span><br><span class="line">    for (int i = A.size() - 1; i &gt;= 0; i -- )    </span><br><span class="line">    &#123;        </span><br><span class="line">        r = r * 10 + A[i];        </span><br><span class="line">        C.push_back(r / b);        </span><br><span class="line">        r %= b;    </span><br><span class="line">    &#125;    </span><br><span class="line">        reverse(C.begin(), C.end());    </span><br><span class="line">        while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();    </span><br><span class="line">        return C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>高精度</category>
        <category>高精度除法</category>
      </categories>
      <tags>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>一维前缀和</title>
    <url>/2022/12/11/11-%E4%B8%80%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    <content><![CDATA[<p>板子如下</p>
<!--more>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S[i] = a[1] + a[2] + ... a[i]</span><br><span class="line">a[l] + ... + a[r] = S[r] - S[l - 1]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>前缀和</category>
        <category>一维前缀和</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>二维前缀和</title>
    <url>/2022/12/11/12-%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    <content><![CDATA[<p>板子如下</p>
<!--more>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S[i, j] = 第i行j列格子左上部分所有元素的和</span><br><span class="line">s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j];</span><br><span class="line"></span><br><span class="line">以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：</span><br><span class="line">S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>前缀和</category>
        <category>二维前缀和</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>一维差分</title>
    <url>/2022/12/11/13-%E4%B8%80%E7%BB%B4%E5%B7%AE%E5%88%86/</url>
    <content><![CDATA[<p>板子如下</p>
<!--more>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给区间[l, r]中的每个数加上c：B[l] += c, B[r + 1] -= c</span><br><span class="line"></span><br><span class="line">int a[N],b[N]; //前缀和数组和差分数组</span><br><span class="line"></span><br><span class="line">void insert(int l,int r,int c)</span><br><span class="line">&#123;</span><br><span class="line">   b[l]+=c;</span><br><span class="line">   b[r+1]-=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //构造差分数组</span><br><span class="line">    for(int i=1;i&lt;=n;i++) insert(i,i,a[i]);</span><br><span class="line">    </span><br><span class="line">    while(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        int l,r,c;</span><br><span class="line">        scanf(&quot;%d%d%d&quot;,&amp;l,&amp;r,&amp;c);</span><br><span class="line">        insert(l,r,c);</span><br><span class="line">    &#125;    </span><br><span class="line">        </span><br><span class="line">    for(int i=1;i&lt;=n;i++) b[i]+=b[i-1]; //还原前缀和数组</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>差分</category>
        <category>一维差分</category>
      </categories>
      <tags>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title>二维差分</title>
    <url>/2022/12/11/14-%E4%BA%8C%E7%BB%B4%E5%B7%AE%E5%88%86/</url>
    <content><![CDATA[<p>板子如下</p>
<!--more>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：</span><br><span class="line">void insert(int x1,int y1,int x2,int y2,int c)</span><br><span class="line">&#123;    </span><br><span class="line">    b[x1][y1]+=c;    </span><br><span class="line">    b[x2+1][y1]-=c;    </span><br><span class="line">    b[x1][y2+1]-=c;    </span><br><span class="line">    b[x2+1][y2+1]+=c;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">int main()</span><br><span class="line">&#123;    </span><br><span class="line">    //构造差分数组    </span><br><span class="line">    for(int i=1;i&lt;=n;i++)        </span><br><span class="line">        for(int j=1;j&lt;=m;j++)            </span><br><span class="line">        insert(i,j,i,j,a[i][j]);                </span><br><span class="line">    while(q--)    </span><br><span class="line">    &#123;        </span><br><span class="line">        int x1,y1,x2,y2,c;        </span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt;x2 &gt;&gt; y2 &gt;&gt; c;        </span><br><span class="line">        //给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：        </span><br><span class="line">        insert(x1,y1,x2,y2,c);    </span><br><span class="line">    &#125;        </span><br><span class="line">    //还原前缀和数组    </span><br><span class="line">    for(int i=1;i&lt;=n;i++)        </span><br><span class="line">        for(int j=1;j&lt;=m;j++)            </span><br><span class="line">         b[i][j]+=b[i-1][j]+b[i][j-1]-b[i-1][j-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>差分</category>
        <category>二维差分</category>
      </categories>
      <tags>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算</title>
    <url>/2022/12/11/15-%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<p>板子如下</p>
<!--more>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">求n的第k位数字: n &gt;&gt; k &amp; 1</span><br><span class="line"></span><br><span class="line">返回n的最后一位1：lowbit(n) = n &amp; -n</span><br><span class="line"></span><br><span class="line">求二进制中1的个数：while(x) x-=lowbit(x),res++;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>位运算</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>双指针</title>
    <url>/2022/12/11/16-%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>板子如下</p>
<!--more>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (int i = 0, j = 0; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    while (j &lt; i &amp;&amp; check(i, j)) j ++ ;</span><br><span class="line"></span><br><span class="line">    // 具体问题的逻辑</span><br><span class="line">&#125;</span><br><span class="line">常见问题分类：</span><br><span class="line">    (1) 对于一个序列，用两个指针维护一段区间</span><br><span class="line">    (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>双指针</category>
      </categories>
      <tags>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>离散化</title>
    <url>/2022/12/11/17-%E7%A6%BB%E6%95%A3%E5%8C%96/</url>
    <content><![CDATA[<p>板子如下</p>
<!--more>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vector&lt;int&gt; alls; // 存储所有待离散化的值</span><br><span class="line"></span><br><span class="line">sort(alls.begin(), alls.end()); // 将所有值排序</span><br><span class="line">alls.erase(unique(alls.begin(), alls.end()), alls.end());   // 去掉重复元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 二分求出x对应的离散化的值</span><br><span class="line">int find(int x) // 找到第一个大于等于x的位置</span><br><span class="line">&#123;</span><br><span class="line">    int l = 0, r = alls.size() - 1;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r &gt;&gt; 1;</span><br><span class="line">        if (alls[mid] &gt;= x) r = mid;</span><br><span class="line">        else l = mid + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return r + 1; // 映射到1, 2, ...n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>离散化</category>
      </categories>
      <tags>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title>区间合并</title>
    <url>/2022/12/11/18-%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<p>板子如下</p>
<!--more>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 将所有存在交集的区间合并</span><br><span class="line">void merge(vector&lt;PII&gt; &amp;segs)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;PII&gt; res;</span><br><span class="line"></span><br><span class="line">    sort(segs.begin(), segs.end());</span><br><span class="line"></span><br><span class="line">    int st = -2e9, ed = -2e9;</span><br><span class="line">    for (auto seg : segs)</span><br><span class="line">        if (ed &lt; seg.first)</span><br><span class="line">        &#123;</span><br><span class="line">            if (st != -2e9) res.push_back(&#123;st, ed&#125;);</span><br><span class="line">            st = seg.first, ed = seg.second;</span><br><span class="line">        &#125;</span><br><span class="line">        else ed = max(ed, seg.second);</span><br><span class="line"></span><br><span class="line">    if (st != -2e9) res.push_back(&#123;st, ed&#125;);</span><br><span class="line"></span><br><span class="line">    segs = res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>区间合并</category>
      </categories>
      <tags>
        <tag>区间合并</tag>
      </tags>
  </entry>
</search>
